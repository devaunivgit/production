{"version":3,"sources":["Redux.tsx","store/actionCreator.js","App.tsx","serviceWorker.ts","store/reducers.js","index.tsx"],"names":["Redux","props","console","log","this","age","onClick","onAgeUp","onAgeDown","loading","React","Component","connect","state","dispatch","value","val","dispach","type","setTimeout","AsyncAgeUp","App","data","completed","id","title","userId","fetch","then","response","json","setState","Boolean","window","location","hostname","match","initialState","reducers","action","newState","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iRAaMA,E,kDACJ,WAAYC,GAAoB,IAAD,6BAC7B,cAAMA,GACNC,QAAQC,IAAI,eAFiB,E,qDAIrB,IAAD,OACP,OACE,oCACE,6BAAMC,KAAKH,MAAMI,KACjB,4BAAQC,QAAS,kBAAM,EAAKL,MAAMM,QAAQ,KAA1C,aACA,4BAAQD,QAASF,KAAKH,MAAMO,WAA5B,aACCJ,KAAKH,MAAMQ,SAAW,mB,GAXXC,IAAMC,WAmCXC,eAlBS,SAACC,GAGvB,OAFAX,QAAQC,IAAI,SAAUU,GAEf,CACLR,IAAKQ,EAAMR,IACXI,QAASI,EAAMJ,YAIQ,SAACK,GAC1B,MAAO,CACLP,QAAS,SAACQ,GAAD,OAAkBD,GCnCTE,EDmCsCD,EClCnD,SAAAE,GACLA,EAJK,CAACC,KAAM,YAKZC,YAAW,WACTF,EAVoB,SAACD,GACzB,MAAO,CAACE,KAAM,SAAUH,MAAQC,GASpBI,CAAWJ,MAClB,QALc,IAACA,GDoClBR,UAAW,kBAAMM,EC3BZ,CAACI,KAAM,WAAYH,MD2BwB,QAMrCH,CAA6CZ,GEkB7CqB,E,4MAtBbR,MAAQ,CAAES,KAAM,CAAEC,WAAW,EAAOC,GAAI,EAAGC,MAAO,GAAIC,OAAQ,I,kEACzC,IAAD,OAClBC,MAAM,gDACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACN,GAAD,OAAU,EAAKS,SAAS,CAAET,KAAMA,S,+BAKxC,OAFApB,QAAQC,IAAIC,KAAKS,MAAMS,MAGrB,6BAKA,kBAAC,EAAD,W,GAhBYZ,IAAMC,WC/BJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WClBAC,EAAe,CACnBhC,IAAK,GACLI,SAAS,GA0BI6B,EAvBE,WAAmC,IAAlCzB,EAAiC,uDAAzBwB,EAAcE,EAAW,uCAC3CC,EAAQ,eAAQ3B,GAItB,MAAoB,WAAhB0B,EAAOrB,KACF,2BACFL,GADL,IAEER,IAAKQ,EAAMR,IAAMkC,EAAOxB,MACxBN,SAAS,KAKO,aAAhB8B,EAAOrB,MACTsB,EAASnC,MAES,YAAhBkC,EAAOrB,OACTsB,EAAS/B,SAAU,GAEd+B,I,eChBHC,EAAQC,YAAYJ,EAAUK,YAAgBC,MAQpDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SFmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.e00295a2.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport * as actionCreator from './store/actionCreator';\nexport interface ReduxProps {\n  age: number;\n  loading: boolean;\n  onAgeUp: (id: number) => void;\n  onAgeDown: () => void;\n}\n\nexport interface ReduxState {}\n\nclass Redux extends React.Component<ReduxProps, ReduxState> {\n  constructor(props: ReduxProps) {\n    super(props);\n    console.log('constructor');\n  }\n  render() {\n    return (\n      <>\n        <div>{this.props.age}</div>\n        <button onClick={() => this.props.onAgeUp(2)}>Increment</button>\n        <button onClick={this.props.onAgeDown}>Decrement</button>\n        {this.props.loading && 'Loading....'}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  console.log('state ', state);\n\n  return {\n    age: state.age,\n    loading: state.loading,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: any) => {\n  return {\n    onAgeUp: (value:number) => dispatch(actionCreator.ageUp(value)),\n    onAgeDown: () => dispatch(actionCreator.ageDown(1)),\n    // onAgeUp: () => dispatch({ type: 'AGE_UP' }),\n    // onAgeDown: () => dispatch({ type: 'AGE_DOWN' }),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Redux);\n","export const AsyncAgeUp = (val) => {\r\n  return {type :'AGE_UP', value : val}\r\n}\r\nexport const loading = () => {\r\n  return {type :'LOADING'}\r\n}\r\nexport const ageUp = (val) => {\r\n  return dispach => {\r\n    dispach(loading())\r\n    setTimeout(() => {\r\n      dispach(AsyncAgeUp(val))\r\n    }, 4000);\r\n  }\r\n}\r\nexport const ageDown = (val) => {\r\n  return {type :'AGE_DOWN', value : val}\r\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\n// import Address from './Address';\nimport Redux from './Redux';\n// import { fetchUserData } from './Api';\n\n// const resources = fetchUserData();\n// export interface AppProps {}\n\n// const App: React.SFC<AppProps> = () => {\n//   const [name, setName] = useState('Unknown');\n\n//   useEffect(() => {\n//     console.log('init');\n//     const getName = new Promise((resolve, reject) => {\n//       setTimeout(() => {\n//         resolve('Devanadhen');\n//       }, 5000);\n//     });\n//     getName.then((result: any) => {\n//       setName(result);\n//     });\n//   }, []);\n//   return (\n//     <>\n//       <div>{name}</div>\n//       <Address></Address>\n//     </>\n//   );\n// };\n\n// export default App;\nexport interface AppProps {}\n\nexport interface AppState {\n  data: {\n    completed: boolean;\n    id: number;\n    title: string;\n    userId: number;\n  };\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  state = { data: { completed: false, id: 0, title: '', userId: 0 } };\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/todos/1')\n      .then((response) => response.json())\n      .then((data) => this.setState({ data: data }));\n  }\n  render() {\n    console.log(this.state.data);\n\n    return (\n      <div>\n        {/* Id : {this.state.data.id}\n        user id ; {this.state.data.userId}\n        title : {this.state.data.title}\n        completed : {this.state.data.completed ? 'Active' : 'Un-active'} */}\n      <Redux />\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n  age: 21,\r\n  loading: false\r\n};\r\n\r\nconst reducers = (state = initialState, action) => {\r\n  const newState = { ...state };\r\n  // if(action.type === 'ASYNC_AGE_UP') {\r\n  //     newState.age++;\r\n  // }\r\n  if (action.type === 'AGE_UP') {\r\n    return {\r\n      ...state,\r\n      age: state.age + action.value,\r\n      loading: false\r\n    };\r\n    // newState.age++;\r\n    // newState.loading = false;\r\n  }\r\n  if (action.type === 'AGE_DOWN') {\r\n    newState.age--;\r\n  }\r\n  if (action.type === 'LOADING') {\r\n    newState.loading = true;\r\n  }\r\n  return newState;\r\n};\r\n\r\nexport default reducers;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './store/reducers';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk  from \"redux-thunk\";\nconst store = createStore(reducers, applyMiddleware(thunk));\n\n// import  createSagaMiddleware  from 'redux-saga';\n// import {watchAgeUp} from './store/saga';\n\n// const sagaMiddleware = createSagaMiddleware()\n// const store = createStore(reducers, applyMiddleware(sagaMiddleware));\n// sagaMiddleware.run(watchAgeUp);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}